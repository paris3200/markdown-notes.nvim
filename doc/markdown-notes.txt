*markdown-notes.txt*  Markdown note-taking plugin for Neovim          *markdown-notes*

==============================================================================
CONTENTS                                                *markdown-notes-contents*

1. Introduction                                      |markdown-notes-introduction|
2. Quick Start                                       |markdown-notes-quick-start|
3. Requirements                                      |markdown-notes-requirements|
4. Installation                                      |markdown-notes-installation|
5. Basic Configuration                               |markdown-notes-basic-config|
6. Usage Guide                                       |markdown-notes-usage-guide|
7. Key Mappings                                      |markdown-notes-key-mappings|
8. Advanced Configuration                            |markdown-notes-advanced-config|
9. Workspaces                                        |markdown-notes-workspaces|
10. Template System                                  |markdown-notes-template-system|
11. Commands                                         |markdown-notes-commands|
12. Troubleshooting                                  |markdown-notes-troubleshooting|
13. API Reference                                    |markdown-notes-api|

==============================================================================
INTRODUCTION                                        *markdown-notes-introduction*

markdown-notes.nvim is a powerful, lightweight markdown note-taking plugin
for Neovim that transforms your editor into a comprehensive knowledge
management system.

Perfect for developers, researchers, and knowledge workers who want to
seamlessly integrate note-taking into their Neovim workflow.

FEATURES:

Core Features~
- Daily Notes - Quick creation and navigation with automatic templating
- Template System - Flexible templates with variable substitution
- Wiki-style Links - Create and follow [[note-name]] links between notes
- Smart Renaming - Rename notes and automatically update all references with file preview
- Powerful Search - Find notes by filename or content with syntax highlighting
- Backlinks - Discover which notes reference the current note

Advanced Features~
- Multi-Workspace Support - Manage multiple independent note vaults
- Tag Management - Search and organize by frontmatter tags
- High Performance - Built for speed with fuzzy finding via fzf-lua
- Highly Configurable - Customize paths, keybindings, and behavior

==============================================================================
QUICK START                                         *markdown-notes-quick-start*

1. Install with your plugin manager: >
    -- lazy.nvim
    {
      "paris3200/markdown-notes.nvim",
      dependencies = { "ibhagwan/fzf-lua" },
      config = true,
    }
<

2. Start taking notes immediately:
   - `<leader>nd` - Create today's daily note
   - `<leader>nn` - Create a new note
   - `<leader>nf` - Find existing notes
   - `<leader>ns` - Search note contents

3. Create your first template (optional): >
    $ mkdir -p ~/notes/templates
    $ echo "# {{title}}\n\nCreated: {{date}}" > ~/notes/templates/basic.md
<

That's it! You're ready to start building your knowledge base.

==============================================================================
REQUIREMENTS                                        *markdown-notes-requirements*

- Neovim >= 0.8.0
- fzf-lua (https://github.com/ibhagwan/fzf-lua) - Required for fuzzy finding

==============================================================================
INSTALLATION                                        *markdown-notes-installation*

Plugin Managers~

lazy.nvim (Recommended): >
    {
      "paris3200/markdown-notes.nvim",
      dependencies = { "ibhagwan/fzf-lua" },
      config = function()
        require("markdown-notes").setup({
          -- your configuration here
        })
      end,
    }
<

packer.nvim: >
    use {
      "paris3200/markdown-notes.nvim",
      requires = { "ibhagwan/fzf-lua" },
      config = function()
        require("markdown-notes").setup()
      end
    }
<

vim-plug: >
    Plug 'ibhagwan/fzf-lua'
    Plug 'paris3200/markdown-notes.nvim'

    " In your init.lua or after/plugin/markdown-notes.lua
    lua require("markdown-notes").setup()
<

==============================================================================
BASIC CONFIGURATION                                 *markdown-notes-basic-config*

The plugin works out of the box with sensible defaults. Here's a minimal
setup: >
    require("markdown-notes").setup({
      vault_path = "~/notes",                    -- Where your notes live
      templates_path = "~/notes/templates",      -- Where your templates live
      dailies_path = "~/notes/daily",           -- Where daily notes go
    })
<

==============================================================================
USAGE GUIDE                                         *markdown-notes-usage-guide*

Getting Started with Daily Notes~
                                              *markdown-notes-usage-daily-notes*
Daily notes are the heart of many note-taking workflows. Start your day by
creating today's note: >
    <leader>nd  →  Creates/opens today's daily note (e.g., 2025-01-15.md)
<

If you have a `Daily.md` template, it will be automatically applied.
Otherwise, a basic note with frontmatter is created.

Creating and Managing Notes~
                                          *markdown-notes-usage-note-management*
Basic Note Creation: >
    <leader>nn  →  Create a new note with your default template
    <leader>nc  →  Choose from available templates
<

Finding and Searching: >
    <leader>nf  →  Fuzzy find notes by filename (with live preview)
    <leader>ns  →  Search inside note contents (with syntax highlighting)
    <leader>ng  →  Search by frontmatter tags
<

Working with Links~
                                                *markdown-notes-usage-links*
Creating Links Between Notes: >
    <leader>nl  →  Search for a note and insert [[wiki-link]]
                   Press Ctrl+L to just insert the link
                   Press Enter to open the note
<

Following and Managing Links: >
    gf          →  Follow the link under cursor
    <leader>nb  →  Show all notes that link to current note (backlinks)
    <leader>nr  →  Rename current note and update all references with preview
<

Smart Renaming~
                                          *markdown-notes-usage-smart-renaming*
When you rename a note that has links pointing to it, markdown-notes.nvim will:
1. Show you a preview of all files that will be updated
2. Let you browse through them with fzf-lua and file preview
3. Update all `[[note-name]]` and `[[note-name|display text]]` references
4. Handle files in subdirectories correctly

You can disable the preview and use a simple confirmation dialog by setting
`ui.show_rename_preview = false` in your configuration.

Using Templates~
                                            *markdown-notes-usage-templates*
Templates make your notes consistent and save time: >
    <leader>np  →  Insert template at cursor position
<

Example template (~/notes/templates/meeting.md): >
    ---
    title: {{title}}
    date: {{date}}
    tags: [meetings]
    ---

    # {{title}}

    **Date:** {{datetime}}
    **Attendees:** 

    ## Agenda

    ## Notes

    ## Action Items
    - [ ] 
<

==============================================================================
KEY MAPPINGS                                        *markdown-notes-key-mappings*

All keybindings use `<leader>n` as the prefix for easy discovery:

Daily Notes~
`<leader>nd`        Create/open today's daily note
`<leader>ny`        Open yesterday's daily note  
`<leader>nt`        Open tomorrow's daily note

Note Management~
`<leader>nn`        Create a new note
`<leader>nc`        Create note with template selection
`<leader>nf`        Search and open existing notes
`<leader>ns`        Search within note contents

Links and Navigation~
`<leader>nl`        Search for note and insert wiki-link
`<leader>nb`        Show notes linking to current note
`<leader>nr`        Rename note and update all references with preview
`gf`                Follow link under cursor

Templates and Tags~
`<leader>np`        Insert template at cursor
`<leader>ng`        Find notes by frontmatter tags

Workspaces~
`<leader>nw`        Switch between workspaces

Note: All keybindings can be customized in your configuration.

==============================================================================
ADVANCED CONFIGURATION                              *markdown-notes-advanced-config*

Custom Configuration Options~
                                           *markdown-notes-advanced-config-opts*
>
    require("markdown-notes").setup({
      -- Core paths
      vault_path = "~/notes",
      templates_path = "~/notes/templates",
      dailies_path = "~/notes/daily",
      weekly_path = "~/notes/weekly",
      notes_subdir = "notes",
      
      -- Template settings
      default_template = "basic", -- Auto-apply this template to new notes
      
      -- UI behavior
      ui = {
        show_rename_preview = true, -- Show file preview when renaming notes with links
      },
      
      -- Custom template variables
      template_vars = {
        date = function() return os.date("%Y-%m-%d") end,
        time = function() return os.date("%H:%M") end,
        datetime = function() return os.date("%Y-%m-%d %H:%M") end,
        title = function() return vim.fn.expand("%:t:r") end,
        yesterday = function() return os.date("%Y-%m-%d", os.time() - 86400) end,
        tomorrow = function() return os.date("%Y-%m-%d", os.time() + 86400) end,
        -- Add your own custom variables
        author = function() return "Your Name" end,
        project = function() return vim.fn.getcwd():match("([^/]+)$") end,
      },
      
      -- Customize keybindings
      mappings = {
        daily_note_today = "<leader>nd",
        daily_note_yesterday = "<leader>ny", 
        daily_note_tomorrow = "<leader>nt",
        new_note = "<leader>nn",
        new_note_from_template = "<leader>nc",
        find_notes = "<leader>nf",
        search_notes = "<leader>ns",
        insert_link = "<leader>nl",
        insert_template = "<leader>np",
        search_tags = "<leader>ng",
        show_backlinks = "<leader>nb",
        follow_link = "gf",
        rename_note = "<leader>nr",
      },
    })
<

Directory Structure Example~
                                        *markdown-notes-advanced-directory-structure*
>
    ~/notes/                          # Main vault
    ├── templates/                    # Your templates
    │   ├── Daily.md                 # Auto-applied to daily notes
    │   ├── meeting.md               # Meeting template
    │   └── project.md               # Project template
    ├── daily/                       # Daily notes
    │   ├── 2025-01-15.md
    │   └── 2025-01-16.md
    └── notes/                       # Regular notes
        ├── project-ideas.md
        └── learning-resources.md
<

==============================================================================
WORKSPACES                                              *markdown-notes-workspaces*

Workspaces allow you to manage multiple independent note vaults simultaneously.
Perfect for separating work notes, personal notes, and project-specific
documentation.

Setting Up Workspaces~
                                               *markdown-notes-workspace-setup*
>
    -- Base configuration (becomes your default workspace)
    require("markdown-notes").setup({
      vault_path = "~/notes",
      templates_path = "~/notes/templates",
      default_workspace = "personal", -- Optional: specify default
    })

    -- Work workspace
    require("markdown-notes").setup_workspace("work", {
      vault_path = "~/work-notes",
      templates_path = "~/work-notes/templates",
      dailies_path = "~/work-notes/standups",
      default_template = "work-note",
      template_vars = {
        project = function() return "Current Project" end,
        sprint = function() return "Sprint-" .. os.date("%U") end,
      },
    })

    -- Research workspace
    require("markdown-notes").setup_workspace("research", {
      vault_path = "~/research/papers",
      templates_path = "~/research/templates",
      dailies_path = "~/research/lab-notes",
      default_template = "research-paper",
    })
<

Workspace Workflow~
                                            *markdown-notes-workspace-workflow*
- Switch workspaces: Use `<leader>nw` to pick from available workspaces
- Persistent context: All commands use the active workspace until you switch
- Independent settings: Each workspace has its own paths, templates, and variables

Workspace Commands~
                                            *markdown-notes-workspace-commands*
:MarkdownNotesWorkspaceStatus                 *:MarkdownNotesWorkspaceStatus*
    Show current workspace for the buffer

:MarkdownNotesWorkspacePick                   *:MarkdownNotesWorkspacePick*
    Pick workspace with fuzzy finder

:MarkdownNotesWorkspaceSwitch {name}          *:MarkdownNotesWorkspaceSwitch*
    Switch to specific workspace

==============================================================================
TEMPLATE SYSTEM                                     *markdown-notes-template-system*

Templates are markdown files with special `{{variable}}` syntax that gets
substituted when creating notes.

Built-in Template Variables~
                                         *markdown-notes-template-built-in-vars*
`{{date}}`          Current date (2025-01-15)
`{{time}}`          Current time (14:30)
`{{datetime}}`      Date and time (2025-01-15 14:30)
`{{title}}`         File name without extension (meeting-notes)
`{{yesterday}}`     Yesterday's date (2025-01-14)
`{{tomorrow}}`      Tomorrow's date (2025-01-16)

Creating Custom Variables~
                                          *markdown-notes-template-custom-vars*
Add custom variables in your configuration: >
    require("markdown-notes").setup({
      template_vars = {
        author = function() return "Your Name" end,
        project = function() return vim.fn.getcwd():match("([^/]+)$") end,
        week = function() return os.date("Week %U") end,
        uuid = function() return vim.fn.system("uuidgen"):gsub("\n", "") end,
      },
    })
<

Example Templates~
                                            *markdown-notes-template-examples*
Daily Note Template (templates/Daily.md): >
    ---
    title: Daily Note - {{date}}
    date: {{date}}
    tags: [daily]
    ---

    # {{date}} - Daily Notes

    ## Today's Goals
    - [ ] 

    ## Notes

    ## Tomorrow's Prep
    - [ ] 
<

Meeting Template (templates/meeting.md): >
    ---
    title: {{title}}
    date: {{date}}
    tags: [meeting]
    attendees: []
    ---

    # {{title}}

    **Date:** {{datetime}}  
    **Attendees:** 

    ## Agenda

    ## Discussion Notes

    ## Action Items
    - [ ] 

    ## Links
<

==============================================================================
COMMANDS                                                *markdown-notes-commands*

Ex Commands~
                                                    *markdown-notes-ex-commands*
:MarkdownNotesRename [{name}]                      *:MarkdownNotesRename*
    Rename current note and update all references. If {name} is not provided,
    prompts for the new name. Shows file preview with affected files or 
    confirmation dialog depending on configuration.

Function API~
                                               *markdown-notes-function-commands*
The plugin provides the following functions that can be called directly:

require("markdown-notes.notes").create_new_note()  *markdown-notes.create_new_note*
    Create a new note. Uses default template if configured, otherwise creates
    basic frontmatter. Prompts for optional title.

require("markdown-notes.notes").create_from_template()  *markdown-notes.create_from_template*
    Create a new note from template. Prompts for title, then allows interactive
    template selection with file preview.

require("markdown-notes.notes").find_notes()       *markdown-notes.find_notes*
    Find and open existing notes using fuzzy finder.

require("markdown-notes.notes").search_notes()     *markdown-notes.search_notes*
    Search within note contents using fuzzy finder.

require("markdown-notes.notes").search_tags()      *markdown-notes.search_tags*
    Search for tags within notes.

require("markdown-notes.daily").open_daily_note(offset)  *markdown-notes.open_daily_note*
    Open daily note. `offset` is number of days from today (0 = today, 
    -1 = yesterday, 1 = tomorrow).

require("markdown-notes.links").search_and_link()  *markdown-notes.search_and_link*
    Search for a note and insert a wiki-style link.

require("markdown-notes.links").follow_link()      *markdown-notes.follow_link*
    Follow the wiki-style link under cursor.

require("markdown-notes.links").show_backlinks()   *markdown-notes.show_backlinks*
    Show backlinks to the current note.

require("markdown-notes.links").rename_note(new_name, opts)  *markdown-notes.rename_note*
    Rename the current note and automatically update all wiki-style link 
    references across the vault. Supports both `[[note]]` and `[[note|display]]`
    formats. Shows file preview with affected files by default, or simple
    confirmation if ui.show_rename_preview is false. Optional {opts} table
    accepts skip_ui boolean for programmatic usage.

require("markdown-notes.templates").pick_template()  *markdown-notes.pick_template*
    Pick and insert a template at cursor position.

require("markdown-notes.templates").insert_template(template_name, custom_vars)  *markdown-notes.insert_template*
    Insert a specific template with optional custom variables.

==============================================================================
TROUBLESHOOTING                                    *markdown-notes-troubleshooting*

Common Issues~
                                                *markdown-notes-common-issues*

"fzf-lua not found" Error~
Solution: Install fzf-lua dependency: >
    -- lazy.nvim
    dependencies = { "ibhagwan/fzf-lua" }

    -- packer.nvim  
    requires = { "ibhagwan/fzf-lua" }
<

Templates Not Working~
Checklist:
1. Verify `templates_path` exists and contains `.md` files
2. Check template syntax uses `{{variable}}` (not `{variable}`)
3. Ensure template file permissions are readable

Links Not Following (gf not working)~
Solution: Ensure you're using the correct link format:
- Correct: `[[note-name]]` or `[[note-name.md]]`
- Incorrect: `[note-name](note-name.md)` (standard markdown links)

Performance Issues with Large Vaults~
Solutions:
- Use `.gitignore` to exclude non-note files from searches
- Consider splitting large vaults into multiple workspaces
- Ensure fzf-lua is properly configured

Debug Information~
                                                *markdown-notes-debug-info*
Check your configuration: >
    :lua print(vim.inspect(require("markdown-notes").config))
<

Check current workspace: >
    :MarkdownNotesWorkspaceStatus
<

==============================================================================
API REFERENCE                                             *markdown-notes-api*

Setup Functions~
                                                        *markdown-notes.setup*
require("markdown-notes").setup({opts})
    Setup function to configure the plugin. See |markdown-notes-basic-config|
    and |markdown-notes-advanced-config| for available options.

                                                *markdown-notes.setup_workspace*
require("markdown-notes").setup_workspace(name, {opts})
    Setup a workspace with the given name and configuration options. See 
    |markdown-notes-workspaces| for details and examples.

Module API~
                                                   *markdown-notes-module-api*
The plugin exposes the following modules:

require("markdown-notes.config")                      *markdown-notes.config*
    Configuration management module.

require("markdown-notes.daily")                       *markdown-notes.daily*
    Daily notes functionality.

require("markdown-notes.notes")                       *markdown-notes.notes*
    General note management.

require("markdown-notes.links")                       *markdown-notes.links*
    Wiki-style links and backlinks.

require("markdown-notes.templates")               *markdown-notes.templates*
    Template system and variable substitution.

require("markdown-notes.workspace")               *markdown-notes.workspace*
    Workspace management and switching functionality.

==============================================================================
vim:tw=78:ts=8:ft=help:norl: